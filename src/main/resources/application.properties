server.port=8765

# sample database values for connecting to *real* database
#spring.datasource.url=jdbc:postgresql://localhost:15432/duty
#spring.datasource.username=duty
#spring.datasource.password=dbpass

# web / templating
spring.mvc.static-path-pattern=/resources/**
spring.thymeleaf.cache=false
### ^ should be enabled for production!

# db (and caching)
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/sql/generated/schema.sql

# security
security.encoder.strength=11

# logging
logging.level.com.dak.duty=DEBUG
logging.level.org.apache.velocity=off
# ^^ for annoying "ResourceManager : unable to find resource" error

# gzip
# note: uncomment these if you don't have this application behind a reverse proxy that handles these things better (nginx, etc)
#server.compression.enabled=true
#server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain

#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

# simple in-mem / file based db for sandboxing
spring.datasource.url=jdbc:h2:file:~/test3
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

info.build.version=@application.version.number@
info.build.timestamp=@timestamp@